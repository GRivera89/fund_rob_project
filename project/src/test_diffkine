#!/usr/bin/env python3

import rospy
from sensor_msgs.msg import JointState

from markers import *
from proyecto_functions import *

if __name__ == '__main__':

    # Initialize the node
    rospy.init_node("testKineControlPosition")
    print('starting motion ... ')
    # Publisher: publish to the joint_states topic
    pub = rospy.Publisher('joint_states', JointState, queue_size=10)
    # Files for the logs
    fxcurrent = open("/tmp/xcurrent.txt", "w")                
    fxdesired = open("/tmp/xdesired.txt", "w")
    fq = open("/tmp/q.txt", "w")

    # Markers for the current and desired positions
    bmarker_current  = BallMarker(color['RED'])
    bmarker_desired = BallMarker(color['GREEN'])

    # Joint names
    jnames = ['shoulder_1_joint', 'shoulder_2_joint', 'elbow_1_joint','wrist_1_joint', 'wrist_2_joint', 'wrist_3_joint']

    # Desired position
    xd = np.array([0.54, 0.125, 0.2491])
    # Initial configuration
    q0 = np.array([0.0, -1.0, 1.7, -2.2, -1.6, 0.0])

    # Resulting initial position (end effector with respect to the base link)
    T = fkine_tm900(q0)
    x0 = T[0:3,3]

    # Red marker shows the achieved position
    bmarker_current.xyz(x0)
    # Green marker shows the desired position
    bmarker_desired.xyz(xd)

    # Instance of the JointState message
    jstate = JointState()
    # Values of the message
    jstate.header.stamp = rospy.Time.now()
    jstate.name = jnames
    # Add the head joint value (with value 0) to the joints
    jstate.position = q0

    # Frequency (in Hz) and control period 
    freq = 200
    dt = 1.0/freq
    rate = rospy.Rate(freq)

    # Initial joint configuration
    q = copy(q0)
    # Max error
    epsilon = 1e-3
    # Values
    k = 0.5     # Ganancia 
    cnt = 1     # Contador
    t=0         # Tiempo
    tt=[]       # Lista para los valores de tiempo
    # Main loop
    while not rospy.is_shutdown():
        # Current time (needed for ROS)
        jstate.header.stamp = rospy.Time.now()
        # Kinematic control law for position (complete here)
        # -----------------------------
        J = jacobian(q)
        T = fkine_tm900(q)
        x = T[0:3,3]
        e = x - xd
         # Almacenamiento de valores
        tt.append(t)
        if (np.linalg.norm(e)<epsilon):
            print("Position Reached")
            break
        
        #Derivada del error
        de = -k*e
        # Variación de la configuración articular
        dq = np.linalg.pinv(J).dot(de)
        # Integración para obtener la nueva configuración articular
        q = q + dt*dq
        # Solamente para evitar un bucle infinito si algo sale mal
        cnt = cnt+1
        if (cnt > 1e5): 
            print("Se excedió el número de iteraciones")
            break
        # -----------------------------
        # Actualizar el tiempo
        t = t + dt
        # Log values                                                      
        fxcurrent.write(str(x[0])+' '+str(x[1]) +' '+str(x[2])+'\n')
        fxdesired.write(str(xd[0])+' '+str(xd[1])+' '+str(xd[2])+'\n')
        fq.write(str(q[0])+" "+str(q[1])+" "+str(q[2])+" "+str(q[3])+" "+
                 str(q[4])+" "+str(q[5])+"\n")
        
        # Publish the message
        jstate.position = q
        pub.publish(jstate)
        bmarker_desired.xyz(xd)
        bmarker_current.xyz(x)
        # Wait for the next iteration
        rate.sleep()

    print('ending motion ...')
    fxcurrent.close()
    fxdesired.close()
    fq.close()
